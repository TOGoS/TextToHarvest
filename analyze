#!/usr/bin/env node
"use strict";

const HarvestClient = require('./HarvestClient').default;
let harvestApiConfigFile = 'harvest-api.config.json';
let projectCodeParserModulePath = './projectCodeToHarvestEntry';
const readJsonFromFile = require('./readJsonFromFile').default;
const readline = require('readline');

function padLeft( string, targetLength, padChar ) {
	while( string.length < targetLength ) string = padChar + string;
	return string;
}
function padRight( string, targetLength, padChar ) {
	while( string.length < targetLength ) string = string + padChar;
	return string;
}

//// Date functions

function parseDate( str ) {
	return new Date(Date.parse(str+'T00:00:00'));
}
function formatDate(date) {
	return date.getFullYear()+'-'+(date.getMonth()+1)+'-'+date.getDate();
}
const dayOfWeekAbbreviations = ['U','M','T','W','R','F','S'];
function formatDateWithDow(date) {
	return formatDate(date)+' ('+dayOfWeekAbbreviations[date.getDay()]+')';
}
function formatPeriod(period, formatFunction) {
	if( formatFunction == undefined ) formatFunction = formatDate;
	let firstDayStr = period.firstDay == undefined ? "-∞" : formatFunction(period.firstDay);
	let lastDayStr  = period.firstDay == undefined ? "+∞" : formatFunction(period.lastDay);
	return firstDayStr+".."+lastDayStr;
}

function datePlusDays( date, days ) {
	if( date == undefined ) {
		throw new Error("Passed null fer date to datePlusDays");
	}
	if( typeof date == 'string' ) {
		date = parseDate(date);
	}
	if( typeof date != 'object' ) {
		throw new Error("Passed non-object fer date to datePlusDays: "+date);
	}
	let copy = new Date(date);
	copy.setDate( date.getDate() + days );
	return copy;
}

function singleDayPeriod( date ) {
	return { firstDay: date, lastDay: date };
}

function weekEnding( date ) {
	return {
		firstDay: datePlusDays(date, -6),
		lastDay: date,
	};
}

function previousDate( date ) {
	return datePlusDays(date, -1);
}

function isSaturday( date ) {
	return date.getDay() == 6;
}
isSaturday.description = "is a saturday";

function isLastDayOfMonth( date ) {
	return datePlusDays(date, 1).getDate() == 1;
}
isLastDayOfMonth.description = "is the last day of a month";

function latestDateWhere( filterFunc, currentDate, iterator ) {
	if( currentDate == undefined ) currentDate = new Date();
	if( iterator == undefined ) iterator = previousDate;
	let attempts = 0;
	let date = currentDate;
	while( attempts < 1000 ) {
		let x = filterFunc(date);
		if( x != undefined && x != false ) return (typeof x == 'boolean' ? date : x);
		date = iterator(date);
		++attempts;
	}
	throw new Error("Failed to find date that "+filterFunc.description+" after "+attempts+" tries");
}
function getLastWeek( currentDate ) {
	let mostRecentSaturday = latestDateWhere( isSaturday, currentDate );
	return weekEnding(mostRecentSaturday);
}
function getLastMonth( currentDate ) {
	return weekEnding(latestDateWhere( isLastDayOfMonth, currentDate ));
}

const hoursSecondsRegex = /^(\d+):(\d+)$/
function datePlusTime( date, time ) {
	if( date == undefined ) {
		throw new Error("Passed null fer date to datePlusTime");
	}
	if( typeof date != 'object' ) {
		throw new Error("Passed non-object fer date to datePlusTime: "+date);
	}
	if( typeof time == 'string' ) {
		let m = hoursSecondsRegex.exec(time);
		if( m == undefined ) throw new Error("Time doesn't parse: "+time);
		time = parseInt(m[1])*60*60 + parseInt(m[2])*60;
	}
	return new Date(date.getTime() + time*1000);
}

//// Summary printing

function csvEncode(v) {
	v = (v == undefined ? "" : ""+v);
	if( v.indexOf(',') != -1 || v.indexOf('"' || v.indexOf("\n")) != -1 ) {
		return '"'+v.replace(/"/g, '""')+'"';
	} else {
		return v;
	}
}

function printCsvRow(row) {
	console.log(row.map(csvEncode).join(","));
}

function printCsv(entries, includeHeader) {
	if( includeHeader ) {
		printCsvRow([
			'date', 'hours', 'projectCode', 'notes'
		])
	}
	for( let e in entries ) {
		let entry = entries[e];
		let hours = (entry.endTime - entry.startTime) / 3600000;
		printCsvRow([
			entry.dateCode, hours, entry.projectCode, entry.notes
		]);
	}
}

function printStandardSummary(entries, period) {
	console.log("Period: "+formatPeriod(period, formatDateWithDow));
	console.log();

	let byDate = {};
	let totalHours = 0;
	let totalHoursByDate = {};
	let totalHoursByProjectCode = {};
	for( let e in entries ) {
		let entry = entries[e];
		
		if( byDate[entry.dateCode] == undefined ) byDate[entry.dateCode] = {
			date: entry.date,
			entries: [],
			totalHours: 0,
			hoursByProjectCode: {},
			notesByProjectCode: {},
		};
		let day = byDate[entry.dateCode];
		let hours = (entry.endTime - entry.startTime) / 3600000;
		day.totalHours += hours;
		day.entries.push(entry);
		day.hoursByProjectCode[entry.projectCode] = (day.hoursByProjectCode[entry.projectCode] || 0) + hours;
		totalHoursByProjectCode[entry.projectCode] = (totalHoursByProjectCode[entry.projectCode] || 0) + hours;
		if( day.notesByProjectCode[entry.projectCode] == undefined ) {
			day.notesByProjectCode[entry.projectCode] = [];
		}
		if( entry.notes && entry.notes.length > 0 ) {
			day.notesByProjectCode[entry.projectCode].push(entry.notes);
		}
		totalHours += hours;
	}
	//console.log(JSON.stringify(byDate, null, "\t"));
	for( let date in byDate ) {
		let day = byDate[date];
		console.log(formatDateWithDow(day.date)+": total: "+padLeft(day.totalHours.toFixed(2), 5, " ")+" hours");
		for( let projectCode in day.hoursByProjectCode ) {
			let notes = day.notesByProjectCode[projectCode];
			let notesStr = "";
			if( notes.length > 0 ) {
				notesStr = "  "+notes.join("  ");
			}
			console.log("    "+padRight(projectCode, 30, " ")+": "+padLeft(day.hoursByProjectCode[projectCode].toFixed(2), 5, " ")+" hours"+notesStr);
		}
	}
	for( let projectCode in totalHoursByProjectCode ) {
		console.log("Total for "+padRight(projectCode, 30, " ")+": "+padLeft(totalHoursByProjectCode[projectCode].toFixed(2), 5, " "));
	}
	console.log("Total: "+totalHours);
}


// Argument parsing regexes (TODO: rename all to *ArgRegex)

const regardProjectCodesArgRegex = /^--regard-project-codes=(.*)$/;
const ignoreProjectCodesArgRegex = /^--ignore-project-codes=(.*)$/;
const dateArgRegex = /^--date=(.*)/;
const weekEndingRegex = /^--week-ending=(.*)/;
const startDateRegex = /^--start-date=(.*)/;
const endDateRegex = /^--end-date=(.*)/;
const summaryFormatArgRegex = /^--summary-format=(.*)$/;
const uploadToHarvestRegex = /^--upload-to-harvest=(.*)$/;
const projectCodeParserModuleArgRegex = /^--project-code-parser-module=(.*)$/;
const harvestApiConfigFileArgRegex = /^--harvest-api-config=(.*)$/;

// Timelog parsing regexex

const dateLineRegex = /^=\s+(\d+\-\d\d\-\d\d)/;
const lineIsPeriodRegex = /^(\d+:\d+)\-/;
const periodLineRegex = /^(\d+:\d+)\-(\d+:\d+)\t+(\S+)(?:\t+(.*?))?(\s*\\)?$/;
const continuationLineRegex = /^\t+(.*?)(\s*\\)?$/;

// Options

let summaryFormat = 'standard';
let shouldIncludeHeaderWithCsvSummary = true;
let ignoreProjectCodes = {};
let regardProjectCodes = undefined;
let shouldUploadToHarvest = false;
let shouldProcessForHarvest = false;
let inputFiles = [];
let targetPeriod = {
	firstDay: undefined,
	lastDay: undefined
};

// Processing result

let validationErrors = [];
let entries = [];
let previousLineContinued = false;

let args = process.argv.slice(2);

function processArgv( argv ) {
	for( let i=0; i<args.length; ++i ) {
		let arg = args[i];
		let m;
		if( (m = dateArgRegex.exec(arg)) ) {
			targetPeriod = singleDayPeriod(parseDate(m[1]));
		} else if( (m = weekEndingRegex.exec(arg)) ) {
			targetPeriod = weekEnding(m[1]);
		} else if( (m = endDateRegex.exec(arg)) ) {
			targetPeriod.lastDay = parseDate(m[1]);
		} else if( (m = startDateRegex.exec(arg)) ) {
			targetPeriod.firstDay = parseDate(m[1]);
		} else if( arg == '--last-week' ) {
			targetPeriod = getLastWeek();
		} else if( arg == '--last-month' ) {
			targetPeriod = getLastMonth();
		} else if( (m = summaryFormatArgRegex.exec(arg)) ) {
			switch( m[1] ) {
			case 'none': case 'csv': case 'standard':
				summaryFormat = m[1];
				break;
			default:
				throw new Error("Unrecognized summary format: '"+m[1]+"'");
			}
		} else if( arg == '--dont-output-header' ) {
			shouldIncludeHeaderWithCsvSummary = false;
		} else if( arg == '--upload-to-harvest' ) {
			shouldUploadToHarvest = true;
		} else if( (m = uploadToHarvestRegex.exec(arg))) {
			switch( m[1] ) {
			case 'yes': shouldUploadToHarvest = true; break;
			case 'no': shouldUploadToHarvest = false; break;
			case 'prompt': shouldUploadToHarvest = 'prompt'; break;
			case 'dry-run': shouldUploadToHarvest = 'dry-run'; break;
			default:
				throw new Error("Invalid value for '--upload-to-harvest': '"+m[1]+"'");
			}
		} else if( (m = regardProjectCodesArgRegex.exec(arg)) ) {
			let codes = m[1].split(',');
			if( regardProjectCodes == undefined ) regardProjectCodes = {};
			for( let c in codes ) {
				regardProjectCodes[codes[c]] = codes[c];
			}
		} else if( (m = ignoreProjectCodesArgRegex.exec(arg)) ) {
			let codes = m[1].split(',');
			for( let c in codes ) {
				ignoreProjectCodes[codes[c]] = codes[c];
			}
		} else if( (m = projectCodeParserModuleArgRegex.exec(arg)) ) {
			// Relative paths will be interpreted relative to this script,
			// not to the working directory, so resolve them:
			projectCodeParserModulePath = require('path').resolve(m[1]);
		} else if( (m = harvestApiConfigFileArgRegex.exec(arg)) ) {
			harvestApiConfigFile = m[1];
		} else if( arg.length > 0 && (arg[0] != '-' || arg == '-') ) {
			inputFiles.push(arg);
		} else {
			return Promise.reject(new Error("Unrecognized argument: '"+arg+"'"));
		}
	}
	return Promise.resolve();
};

processArgv( process.argv.slice(2) ).then( () => {
	if( inputFiles.length == 0 ) inputFiles.push('-');
	
	let processInputsPromise = Promise.resolve();
	for( let i in inputFiles ) {
		processInputsPromise = processInputsPromise.then( () => new Promise( (resolve,reject) => {
			let filename = inputFiles[i];
			let lineNumber = 0;
			let processingDate = undefined;
			let processingDateStr = undefined;
			let processingEntry = undefined;
			let instream;
			if( filename == '-' ) {
				instream = process.stdin;
			} else {
				instream = require('fs').createReadStream(filename);
			}
			let rl = readline.createInterface({
				input: instream,
				isTerminal: false
			});
			
			instream.on('error', (err) => {
				reject(new Error("Error reading '"+filename+"': "+err.message));
			});
			rl.on('close', resolve);
			rl.on('line', (line) => {
				++lineNumber;
				let m;
				
				if( previousLineContinued ) {
					let m = continuationLineRegex.exec(line);
					if( !m ) {
						validationErrors.push({
							filename,
							lineNumber,
							typeCode: "malformed-continuation",
							message: "Malformed continuation line: "+line
						});
						return;
					}
					
					processingEntry.notes += " "+m[1].trim();
					previousLineContinued = m[2] != undefined;
					return;
				}
				
				if( (m = dateLineRegex.exec(line)) ) {
					let dateStr = m[1];
					let date = new Date(parseDate(dateStr));
					if( processingDate != undefined && date <= processingDate ) {
						validationErrors.push({
							filename,
							lineNumber,
							typeCode: "out-of-order-days",
							message: date.toISOString()+" <= "+processingDate.toISOString()
						});
					}
					if( processingDate == undefined || date > processingDate ) processingDate = date;
					processingDateStr = dateStr;
					return;
				}
				
				if(
					(targetPeriod.firstDay != undefined && processingDate < targetPeriod.firstDay) ||
					(targetPeriod.lastDay != undefined && processingDate > targetPeriod.lastDay)
				) {
					return; // Because we don't care!
				}
				
				if( lineIsPeriodRegex.exec(line) ) {
					m = periodLineRegex.exec(line);
					if( processingDate == null ) {
						validationErrors.push({
							filename,
							lineNumber,
							typeCode: "dateless-period",
							message: "Period line without date"
						});
						return;
					}
					
					if( !m ) {
						validationErrors.push({
							filename,
							lineNumber,
							typeCode: "malformed-time-period",
							message: "Malformed period line: "+line
						});
						return;
					}
					
					let startTimeStr = m[1];
					let endTimeStr = m[2];
					let projectCode = m[3];
					let notes = m[4];
					let continueSlash = m[5];
					if( continueSlash ) previousLineContinued = true;
					
					let startTime = datePlusTime(processingDate, m[1]);
					let endTime   = datePlusTime(processingDate, m[2]);
					//let interval  = endTime - startTime;
					
					entries.push(processingEntry = {
						date: processingDate,
						dateCode: processingDateStr,
						startTime, endTime,
						projectCode, notes,
					});
					//console.log(projectCode+" for "+(interval/60000)+" minutes");
					
					return;
				}
			});
		}));
	}
	return processInputsPromise;
}).then( () => {
	entries = entries.filter( (entry) => {
		let projectCodeParts = entry.projectCode.split('/');
		if( regardProjectCodes != undefined ) {
			if( !regardProjectCodes[entry.projectCode] && !regardProjectCodes[projectCodeParts[0]] ) return false;
		}
		if( ignoreProjectCodes[entry.projectCode] || ignoreProjectCodes[projectCodeParts[0]] ) return false;
		return true;
	});
}).then( () => {
	switch( summaryFormat ) {
	case 'none': break;
	case 'standard': printStandardSummary(entries, targetPeriod); break;
	case 'csv': printCsv(entries, shouldIncludeHeaderWithCsvSummary); break;
	}
}).then( () => {
	if( validationErrors.length > 0 ) {
		console.error();
		console.error("Invalid input:");
		for( let f in validationErrors ) {
			let fault = validationErrors[f];
			console.error("Line "+fault.filename+":"+fault.lineNumber+": "+fault.message);
		}
		return Promise.reject(new Error("There were errors with your input."));
	}
}).then( () => {
	if( shouldUploadToHarvest == 'prompt' ) {
		shouldProcessForHarvest = false;
		shouldUploadToHarvest = false;
		console.error("Need to refactor analyze a bit before can prompt for harvest upload.");
		process.exitCode = 1;
	} else if( shouldUploadToHarvest == 'dry-run' ) {
		shouldProcessForHarvest = true;
		shouldUploadToHarvest = false;
	} else {
		shouldProcessForHarvest = shouldUploadToHarvest;
	}
}).then( () => {
	if( !shouldProcessForHarvest ) return;

	// If this was overridden on the command line,
	// then it will have been resolved to an absolute path.
	const projectCodeToHarvestEntry = require(projectCodeParserModulePath).default;

	console.log("Processing for upload to harvest...")
	let newHarvestEntries = [];
	let nameTranslationErrors = {};
	let harvestEntriesByDate = {};
	for( let e in entries ) {
		let entry = entries[e];
		let harvestEntry;
		try {
			harvestEntry = projectCodeToHarvestEntry(entry.projectCode);
			harvestEntry.hours = (entry.endTime - entry.startTime) / 3600000;
			harvestEntry.notes = [
				harvestEntry.notes,
				entry.notes
			].filter( (v) => v != null && v.length > 0 ).join(": ");
		} catch( err ) {
			nameTranslationErrors[entry.projectCode] = err;
		}
		if( harvestEntry != null ) {
			if( !harvestEntriesByDate[entry.dateCode] ) {
				harvestEntriesByDate[entry.dateCode] = [];
			}
			harvestEntriesByDate[entry.dateCode].push(harvestEntry);
		}
	}
	let unparseableProjectCodes = [];
	for( let projectCode in nameTranslationErrors ) unparseableProjectCodes.push(projectCode);
	
	if( unparseableProjectCodes.length > 0 ) {
		let msg = "The following project codes were not understood; plz add mappings or fix spelling:\n"+
			unparseableProjectCodes.join(", ");
		return Promise.reject(new Error(msg));
	}
	
	if( !shouldUploadToHarvest ) return;

	return readJsonFromFile(harvestApiConfigFile).then( (config) => {
		return new HarvestClient(config);
	}).then( (harvestClient) => {
		let updateProm = Promise.resolve();
		for( let date in harvestEntriesByDate ) {
			updateProm = updateProm.then( () => {
				console.log("Uploading hours for "+date+" to Harvest...");
				return harvestClient.updateHoursForDay(date, harvestEntriesByDate[date])
			});
		}
		return updateProm;
	})
}).catch( (err) => {
	console.error();
	console.error(err.stack);
	process.exitCode = 1;
});
